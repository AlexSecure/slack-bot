# The template format version - don't change this unless you need a newer version
AWSTemplateFormatVersion: '2010-09-09'

# Transform directive for AWS SAM; enables SAM features
Transform: AWS::Serverless-2016-10-31

# Description of what this CloudFormation template does
Description: >
  slack-bot-app

  Slack Bot App Questionnaire

# Globals are settings that apply to all functions in this stack unless explicitly overridden
Globals:
  Function:
    Timeout: 10  # Lambda function timeout in seconds; after this time, the function is terminated

# Parameters are values that you can pass into your template at deploy time
Parameters:
  SecretArn:
    Type: String
    Description: ARN of the Secrets Manager secret containing the Slack App credentials
  StageName:
    Type: String
    Default: dev  # Default value if not provided at deploy time
    Description: The stage name of the API Gateway

# Resources are the AWS resources that will be created or modified by this template
Resources:
  # Defines the HTTP API resource
  SlackApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref StageName  # References the StageName parameter defined above

  # IAM Role for the Slack Bot App's Lambda function
  SlackBotAppFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Permissions for the Lambda function to write logs
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              # Permission for the Lambda function to access secrets
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref SecretArn

  # The actual Lambda function for the Slack Bot
  SlackBotAppFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/  # Location of the Lambda function code
      Handler: app.lambda_handler  # Function within your code that Lambda calls to start execution
      Runtime: python3.11  # Programming language runtime
      Role: !GetAtt SlackBotAppFunctionRole.Arn  # IAM role that the function assumes when it executes
      Architectures:
        - x86_64
      Layers:
        - !Ref SlackBotLayer  # Reference to a layer used by the function
      Events:
        WarmUpSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(3 minutes)  # Event to trigger the function on a schedule
            Input: '{"source": "aws.events"}'
        SlackBotApp:
          Type: HttpApi  # Trigger for the function when HTTP API is accessed
          Properties:
            Path: /slack-bot-app
            Method: post
            ApiId: !Ref SlackApi  # Reference to the HTTP API defined above

  # Layer for the Slack Bot, containing dependencies
  SlackBotLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: slack-bot-layer
      Description: Slack Bot dependencies layer
      ContentUri: layer/
      CompatibleRuntimes:
        - python3.11
      RetentionPolicy: Retain  # Policy for retaining or deleting this layer

# Outputs section defines the values that can be queried about this stack after its creation
Outputs:
  SlackBotAppFunction:
    Description: "Slack App Bot Lambda Function ARN"
    Value: !GetAtt SlackBotAppFunction.Arn  # ARN of the Slack Bot Lambda function

  SlackApiUrl:
    Description: "API Gateway endpoint URL for Slack Bot"
    Value: !Sub "https://${SlackApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/slack-bot-app"  # URL of the deployed API Gateway endpoint
